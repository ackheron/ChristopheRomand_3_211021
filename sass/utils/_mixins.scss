/* largeur max et auto centrage */
@mixin center-max {
  max-width: 1440px;
  margin: auto;
}
/* définition des border-radius avec la fontion  radiusValue */
@mixin border-radius($corners: "all", $radius: $defaultRadius) {
  border-radius: radiusValue($corners, $radius);
}

/* mixin si l'intitulé de plat est trop long , il devra être rogné avec des points de suspension */
@mixin text-wrap {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* mixin permettant de définir facilement la largeur et la hauteur (taille) d'un élément. */
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin gradient($from, $to) {
  background: linear-gradient($from, $to);
}

/*=============================================
=            Mixin media queries pour la gestion responsive des breakpoints            =
=============================================*/

/* :@param {String} $breakpoint - Breakpoint name
@require $breakpoints */

@mixin responsive($breakpoint) {
  // Si la clef existe dans la map "breakpoints""
  @if map-has-key($breakpoints, $breakpoint) {
    // Affiche une media query basé sur la valeur
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // Si la clef n'est pas dans la map "$breakpoints"
  @else {
    @warn "Malheureusement, aucune valeur n'a pu être récupérée de  `#{$breakpoint}`. "
        + "Les breakpoints disponibles sont: #{map-keys($breakpoints)}.";
  }
}
